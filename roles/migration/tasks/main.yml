---
- name: Ensure all ClusterOperators are in the desired state
  check_cluster_operators:
    timeout: "{{ co_timeout }}"
    interval: 10

- name: Check for conflicting CIDR ranges
  check_cidr_ranges:
    conflicting_ranges: "{{ conflicting_cidr_ranges }}"
  register: result

- name: Display conflicting CIDRs if found
  when: result.failed
  debug:
    msg: >
      Conflicting CIDRs detected: {{ result.conflicting_cidrs }}.
      CIDRs in use: {{ result.used_cidrs }}.

- name: Inform the user that no conflicts were found
  when: result.msg == "No conflicting CIDR ranges found."
  debug:
    msg: "{{ result.msg }}"

- name: Check if the cluster is configured with NetworkPolicy isolation mode
  check_network_policy_mode:
  register: result

- name: Notify user if NetworkPolicy isolation mode is not set
  when: result.failed
  debug:
    msg: "{{ result.msg }}"

- name: Confirm that NetworkPolicy isolation mode is set
  when: not result.failed
  debug:
    msg: "{{ result.msg }}"

#- name: Check OpenShift version
#  check_openshift_version:
#  register: version_result

#- name: Warn user about egressIP, egressFirewall, and multicast migration
#  debug:
#    msg: "{{ version_result.msg }}"

- name: Patch Network.operator.openshift.io and wait for migration field to clear
  clean_migration_field:
    timeout: "{{ clean_migration_timeout }}"

- name: Change network type to trigger MCO update
  change_network_type:
    network_type: "{{ target_network_type }}"
    timeout: "{{ change_migration_timeout }}"

- name: Get OpenShift version using custom module
  get_ocp_version:
    retries: 3
    delay: 5
  register: openshift_version_result
  failed_when: openshift_version_result.version is not defined

- name: Parse OpenShift version and determine if it's >= 4.12
  set_fact:
    version_major: "{{ openshift_version_result.version.split('.')[0] | int }}"
    version_minor: "{{ openshift_version_result.version.split('.')[1] | int }}"

#- name: Warn if OpenShift version is < 4.12
#  debug:
#    msg: "Warning: The OpenShift version is {{ ocp_version }}. EgressIP, EgressFirewall, and multicast features of SDN won't be automatically migrated in OVNKubernetes. You need to manually configure them."
#  when: version_major | int == 4 and version_minor | int <= 11

#- name: Notify user if version < 4.12
#  when: version_major | int  == 4 and version_minor | int <= 11
#  debug:
#    msg: "OpenShift version is {{ version_major }}.{{ version_minor }} Disabling migration features not available."

#- name: Check if version is >= 4.12
#  when: version_major | int == 4 and version_minor | int >= 12
#  block:
#    - name: Disable automatic migration of SDN features for the specified network type
#      disable_migration_features:
#        networkType: "OVNKubernetes"
#        egressIP: false
#        egressFirewall: false
#        multicast: false
#        retries: 3
#        delay: 5
#      register: migration_result

#    - name: Display the result of the migration disable operation
#      debug:
#        msg: "{{ migration_result.msg }}"

- name: Customize network settings if parameters are provided
  configure_network_settings:
    network_type: OVNKubernetes
    mtu: "{{ mtu | default(omit) }}"
    geneve_port: "{{ geneve_port | default(omit) }}"
    ipv4_subnet: "{{ ipv4_subnet | default(omit) }}"
    retries: 3
    delay: 5
  register: patch_result

- name: Debug patch result
  debug:
    msg: "{{ patch_result.msg }}"

- name: Wait until MCO starts applying new machine config to nodes
  wait_for_mco:
    timeout: "{{ mco_timeout }}"
  register: mco_status

- name: Print MCO status message
  debug:
    msg: "{{ mco_status.msg }}"

- name: Wait for MCO to finish its work
  wait_for_mco_completion:
    timeout: "{{ mcp_completion_timeout }}"

- name: Verify machine configuration status on nodes
  verify_machine_config:
    timeout: "{{ verify_machine_config_timeout }}"
    network_type: "OVNKubernetes"

- name: Trigger OVN-Kubernetes deployment
  trigger_network_type:
    network_type: "{{ ovn_network_type }}"
    timeout: "{{ ovn_co_timeout }}"

- name: Wait until the Network Cluster Operator is in PROGRESSING=True state
  wait_for_network_co:
    timeout: "{{ ovn_co_timeout }}"
  register: network_co_status

- name: Display the status of the Network Cluster Operator
  debug:
    msg: "{{ network_co_status.msg }}"

- name: Wait for Multus pods to restart
  wait_multus_restart:
    timeout: "{{ ovn_multus_timeout }}"
